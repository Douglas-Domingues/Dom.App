@inherits LayoutComponentBase

<CascadingValue Value="_isDarkMode">
        <MudThemeProvider
        @ref="@_mudThemeProvider"
        @bind-IsDarkMode="_isDarkMode"
        Theme="Configuration.Theme"/>
    <MudSnackbarProvider />

    <AuthorizeView>
        <Authorized>
            <MudLayout>
                <MudAppBar>
                    <h1>DomApp</h1>
                    <MudSpacer />
                    <MudText Typo="Typo.caption" Class="mr-4">
                        @context.User.Identity?.Name
                    </MudText>
                    <MudSwitch @bind-Value="@_isDarkMode"
                        ThumbIcon="@(_isDarkMode ? Icons.Material.Rounded.DarkMode : Icons.Material.Rounded.LightMode)"
                        ThumbIconColor="Color.Primary" />
                </MudAppBar>
                <MudMainContent>
                    <MudContainer>
                        @Body
                    </MudContainer>
                </MudMainContent>
            </MudLayout>
        </Authorized>
        <NotAuthorized>
            <div>
                <Dom.App.Components.Identity.LoginRedirect></Dom.App.Components.Identity.LoginRedirect>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingValue>

@code{
    private bool _isDarkMode = true;
    private MudThemeProvider _mudThemeProvider = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }
}